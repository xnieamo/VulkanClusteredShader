#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable


struct Light 
{
	vec4 pos;
	vec4 col;
	vec4 vel;
};

layout(binding = 0) uniform UniformBufferObject {
	int height;
    int width;
    int xtiles;
    int ytiles;
    int max_lights_per_cluster;
    int number_lights;
    int tile_size;
    mat4 model;
    mat4 view;
    mat4 proj;

} ubo;

layout(std430, binding = 1) buffer LightBuffer
{
	Light lights[];
} lightBuffer;

layout(std430, binding = 2) buffer IndexLookup
{
	int data[];
} indexLookupBuffer;


// Shared values between all the threads in the group
shared uint visibleLightCount;
vec4 frustumPlanes[6];
// Shared local storage for visible indices, will be written out to the global buffer at the end
shared int visibleLightIndices[100];
shared mat4 viewProjection;

#define LIGHT_NUM 100


void createFrustumPlanes() {
	// Left
	frustumPlanes[0].x = viewProjection[3][0] + viewProjection[0][0];
	frustumPlanes[0].y = viewProjection[3][1] + viewProjection[0][1];
	frustumPlanes[0].z = viewProjection[3][2] + viewProjection[0][2];
	frustumPlanes[0].w = viewProjection[3][3] + viewProjection[0][3];

	// Right
	frustumPlanes[1].x = viewProjection[3][0] - viewProjection[0][0];
	frustumPlanes[1].y = viewProjection[3][1] - viewProjection[0][1];
	frustumPlanes[1].z = viewProjection[3][2] - viewProjection[0][2];
	frustumPlanes[1].w = viewProjection[3][3] - viewProjection[0][3];

	// Top
	frustumPlanes[2].x = viewProjection[3][0] - viewProjection[1][0];
	frustumPlanes[2].y = viewProjection[3][1] - viewProjection[1][1];
	frustumPlanes[2].z = viewProjection[3][2] - viewProjection[1][2];
	frustumPlanes[2].w = viewProjection[3][3] - viewProjection[1][3];
	
	// Bottom
	frustumPlanes[3].x = viewProjection[3][0] + viewProjection[1][0];
	frustumPlanes[3].y = viewProjection[3][1] + viewProjection[1][1];
	frustumPlanes[3].z = viewProjection[3][2] + viewProjection[1][2];
	frustumPlanes[3].w = viewProjection[3][3] + viewProjection[1][3];

	// Far
	frustumPlanes[4].x = viewProjection[3][0] + viewProjection[2][0] * 100.0;
	frustumPlanes[4].y = viewProjection[3][1] + viewProjection[2][1] * 100.0;
	frustumPlanes[4].z = viewProjection[3][2] + viewProjection[2][2] * 100.0;
	frustumPlanes[4].w = viewProjection[3][3] + viewProjection[2][3] * 100.0;

	// Top
	frustumPlanes[5].x = viewProjection[3][0] - viewProjection[2][0] * 0.1;
	frustumPlanes[5].y = viewProjection[3][1] - viewProjection[2][1] * 0.1;
	frustumPlanes[5].z = viewProjection[3][2] - viewProjection[2][2] * 0.1;
	frustumPlanes[5].w = viewProjection[3][3] - viewProjection[2][3] * 0.1;

	for (int i = 0; i < 6; i++) {
		frustumPlanes[5] /= length(frustumPlanes[5].xyz);
	}
}

// Took some light culling guidance from Dice's deferred renderer
// http://www.dice.se/news/directx-11-rendering-battlefield-3/

#define TILE_SIZE 32
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;
void main() {



	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.x, itemID.x);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	// Initialize shared global values for depth and light count
	if (gl_LocalInvocationIndex == 0) {
		visibleLightCount = 0;
		viewProjection = ubo.proj * ubo.view;
	}

	int l_index = location.x;
	if (l_index < LIGHT_NUM) {
		// Update velocity
		vec4 pos = lightBuffer.lights[l_index].pos;
		vec4 vel = lightBuffer.lights[l_index].vel;
		pos[1] += vel[0];
		if (pos[1] >= vel[1])
			pos[1] = vel[2];

		lightBuffer.lights[l_index].pos = pos;
	}

	barrier();

	// indexLookupBuffer.data[location.x] = int(gl_NumWorkGroups.x * tileID.y + tileID.x);
	// indexLookupBuffer.data[location.x] =  location.x * 50;


	// // One thread should fill the global light buffer
	// if (gl_LocalInvocationIndex == 0) {
	// // if (l_index < LIGHT_NUM) {

		uint offset = l_index * 50; // Determine bosition in global buffer
		// for (uint i = 0; i < visibleLightCount ; i++) {
		for (uint i = 0; i < 50 ; i++) {
			indexLookupBuffer.data[i + offset] = int(i);//visibleLightIndices[i];
		}

	// 	// if (visibleLightCount != 50) {
	// 	// 	// Unless we have totally filled the entire array, mark it's end with -1
	// 	// 	// Final shader step will use this to determine where to stop (without having to pass the light count)
	// 	// 	indexLookupBuffer.data[offset + visibleLightCount] = -1;
	// 	// }
	// }

	// indexLookupBuffer.data[location.x] = int(location.x);

	// // Step 2: One thread should calculate the frustum planes to be used for this tile
	// if (gl_LocalInvocationIndex == 0) {
	// 	// Convert the min and max across the entire tile back to float
	// 	float minDepth = 0.1;
	// 	float maxDepth = 100.0;

	// 	// Steps based on tile sale
	// 	vec2 negativeStep = (2.0 * vec2(tileID)) / vec2(tileNumber);
	// 	vec2 positiveStep = (2.0 * vec2(tileID + ivec2(1, 1))) / vec2(tileNumber);

	// 	// Set up starting values for planes using steps and min and max z values
	// 	frustumPlanes[0] = vec4(1.0, 0.0, 0.0, 1.0 - negativeStep.x); // Left
	// 	frustumPlanes[1] = vec4(-1.0, 0.0, 0.0, -1.0 + positiveStep.x); // Right
	// 	frustumPlanes[2] = vec4(0.0, 1.0, 0.0, 1.0 - negativeStep.y); // Bottom
	// 	frustumPlanes[3] = vec4(0.0, -1.0, 0.0, -1.0 + positiveStep.y); // Top
	// 	frustumPlanes[4] = vec4(0.0, 0.0, -1.0, -minDepth); // Near
	// 	frustumPlanes[5] = vec4(0.0, 0.0, 1.0, maxDepth); // Far

	// 	// Transform the first four planes
	// 	for (uint i = 0; i < 4; i++) {
	// 		frustumPlanes[i] *= viewProjection;
	// 		frustumPlanes[i] /= length(frustumPlanes[i].xyz);
	// 	}

	// 	// Transform the depth planes
	// 	frustumPlanes[4] *= ubo.view;
	// 	frustumPlanes[4] /= length(frustumPlanes[4].xyz);
	// 	frustumPlanes[5] *= ubo.view;
	// 	frustumPlanes[5] /= length(frustumPlanes[5].xyz);

	// 	createFrustumPlanes();
	// }

	// barrier();

	// // Step 3: Cull lights.
	// // Parallelize the threads against the lights now.
	// // Can handle 256 simultaniously. Anymore lights than that and additional passes are performed
	// int lightCount = LIGHT_NUM;
	// uint threadCount = TILE_SIZE * TILE_SIZE;
	// uint passCount = (lightCount + threadCount - 1) / threadCount;
	// for (uint i = 0; i < passCount; i++) {
	// 	// Get the lightIndex to test for this thread / pass. If the index is >= light count, then this thread can stop testing lights
	// 	uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
	// 	if (lightIndex >= lightCount) {
	// 		break;
	// 	}

	// 	vec4 position = lightBuffer.lights[l_index].pos;
	// 	float radius  = lightBuffer.lights[l_index].vel.w;

	// 	// We check if the light exists in our frustum
	// 	float distance = 0.0;
	// 	for (uint j = 0; j < 4; j++) {
	// 		distance = dot(position, frustumPlanes[j]) + radius;

	// 		// If one of the tests fails, then there is no intersection
	// 		if (distance <= 0.0) {
	// 			break;
	// 		}
	// 	}

	// 	// If greater than zero, then it is a visible light
	// 	if (distance > 0.0) {
	// 		// Add index to the shared array of visible indices
	// 		uint offset = atomicAdd(visibleLightCount, 1);
	// 		visibleLightIndices[offset] = int(lightIndex);
	// 	}
	// }

	// barrier();


	// ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	// ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	// ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	// ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	// indexLookupBuffer.data[location.x] = int(gl_NumWorkGroups.x * tileID.y + tileID.x);
	// indexLookupBuffer.data[location.x] =  location.x;

	// if (gl_LocalInvocationIndex == 0) {
		// uint offset = l_index * 1;


	// // // // One thread should fill the global light buffer
	// if (gl_LocalInvocationIndex == 0) {
	// // if (l_index < LIGHT_NUM) {

	// 	uint offset = l_index * 50; // Determine bosition in global buffer
	// 	// for (uint i = 0; i < visibleLightCount ; i++) {
	// 	for (uint i = 0; i < 50 ; i++) {
	// 		if (i >= 50)
	// 			break;
	// 		indexLookupBuffer.data[offset + i] = int(i);//visibleLightIndices[i];
	// 	}

	// 	// if (visibleLightCount != 50) {
	// 	// 	// Unless we have totally filled the entire array, mark it's end with -1
	// 	// 	// Final shader step will use this to determine where to stop (without having to pass the light count)
	// 	// 	indexLookupBuffer.data[offset + visibleLightCount] = -1;
	// 	// }
	// }
}