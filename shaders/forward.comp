#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable


struct Light 
{
	vec4 pos;
	vec4 col;
	vec4 vel;
};

layout(binding = 0) uniform UniformBufferObject {
	int height;
    int width;
    int xtiles;
    int ytiles;
    int max_lights_per_cluster;
    int number_lights;
    int tile_size;
    mat4 model;
    mat4 view;
    mat4 proj;
    vec4 pos;
    vec4 dir;
    vec4 up;

} ubo;

#define MAX_CLUSTER_LIGHTS 50
struct lightIndexArray {
	int indices[MAX_CLUSTER_LIGHTS];
};

layout(std430, binding = 1) buffer LightBuffer
{
	Light lights[];
} lightBuffer;


layout(std430, binding = 2) buffer IndexLookup
{
	lightIndexArray data[];
} indexLookupBuffer;


// Shared values between all the threads in the group
shared uint visibleLightCount;
shared vec4 frustumPlanes[6];
shared mat4 viewProjection;
shared mat4 inv_projView;

#define LIGHT_NUM 100
#define TILE_SIZE 32
#define THREAD_COUNT 16
layout(local_size_x = THREAD_COUNT, local_size_y = 1) in;
void main() {

	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	// Initialize shared global values for depth and light count
	if (gl_LocalInvocationIndex == 0) {
		visibleLightCount = 0;
		viewProjection = ubo.proj * ubo.view;
		inv_projView = inverse(ubo.proj * ubo.view);
	}

	for (uint i = gl_WorkGroupID.x; i < LIGHT_NUM; i += gl_NumWorkGroups.x) {
		// Update velocity
		vec4 pos = lightBuffer.lights[i].pos;
		vec4 vel = lightBuffer.lights[i].vel;
		pos[1] += vel[0] * 0.1;
		if (pos[1] >= vel[1]/2)
			pos[1] = vel[2];

		lightBuffer.lights[i].pos = pos;
	}

	barrier();

	// Calculate the frustum coordinates in screen space
	if (gl_LocalInvocationIndex == 0) {
		inv_projView = inverse(ubo.proj * ubo.view);

		vec2 tilesSizeInPixels = 2.0f * vec2(TILE_SIZE, TILE_SIZE) / vec2(ubo.width, ubo.height);
		
		vec2 screenFrustum[4];
		screenFrustum[0] = vec2(-1.0, -1.0) + tileID * tilesSizeInPixels;
	    screenFrustum[1] = screenFrustum[0] + vec2(tilesSizeInPixels.x, 0.0f);
	    screenFrustum[2] = screenFrustum[0] + vec2(tilesSizeInPixels.x, tilesSizeInPixels.y);
	    screenFrustum[3] = screenFrustum[0] + vec2(0.0f, tilesSizeInPixels.x); 

	    vec3 viewFrustum[8];
	    vec4 view;
	    for (int i = 0; i < 4; i++) {
	    	view = inv_projView * vec4(screenFrustum[i], 0.0f, 1.0f);
	    	viewFrustum[i] = view.xyz / view.w;
	    	view = inv_projView * vec4(screenFrustum[i], 1.0f, 1.0f);
	    	viewFrustum[i + 4] = view.xyz / view.w;
	    }

	    for (int i = 0; i < 4; i++) {
			frustumPlanes[i].xyz = normalize(cross(viewFrustum[i] - ubo.pos.xyz, viewFrustum[(i + 1)] - ubo.pos.xyz));
			frustumPlanes[i].w   = dot(frustumPlanes[i].xyz, viewFrustum[i]);
	    }

	    frustumPlanes[4].xyz = normalize(cross(viewFrustum[2] - viewFrustum[0], viewFrustum[3]- viewFrustum[0]));
	    frustumPlanes[4].w   = dot(frustumPlanes[4].xyz, viewFrustum[0]);
		frustumPlanes[5].xyz = normalize(cross(viewFrustum[6] - viewFrustum[4], viewFrustum[5]- viewFrustum[4]));
		frustumPlanes[5].w   = dot(frustumPlanes[5].xyz, viewFrustum[4]);

	}
	barrier();

	// Compute light culling
	uint passCount = (LIGHT_NUM + THREAD_COUNT - 1) / THREAD_COUNT;
	for (uint i = 0; i < passCount; i++) {
		uint lightIndex = i * THREAD_COUNT + itemID.x;
		if (lightIndex > LIGHT_NUM) {
			break;
		}


		vec4 pos = lightBuffer.lights[lightIndex].pos;
		float radius = lightBuffer.lights[lightIndex].vel.w;

		// We check if the light exists in our frustum
		bool inFrustum = true;
		for (uint j = 0; j < 6; j++) {
			if (dot(pos.xyz, frustumPlanes[j].xyz) - frustumPlanes[j].w < -radius) {
				inFrustum = false;
				break;
			}
		}

		if (inFrustum) {
			uint offset = atomicAdd(visibleLightCount, 1);
			if (visibleLightCount >= ubo.max_lights_per_cluster) {break;}
			indexLookupBuffer.data[index].indices[offset] = int(lightIndex);
		}
	}
	barrier();

	// Set the last index to -1 to signal stop
	if (gl_LocalInvocationIndex == 0) {
		if (visibleLightCount < ubo.max_lights_per_cluster) {
			indexLookupBuffer.data[index].indices[visibleLightCount] = -1;
		}
	}

}