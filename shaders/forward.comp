#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable


struct Light 
{
	vec4 pos;
	vec4 col;
	vec4 vel;
};

layout(binding = 0) uniform UniformBufferObject {
	int height;
    int width;
    int xtiles;
    int ytiles;
    int max_lights_per_cluster;
    int number_lights;
    int tile_size;
    mat4 model;
    mat4 view;
    mat4 proj;
    vec4 pos;
    vec4 dir;
    vec4 up;

} ubo;

#define MAX_CLUSTER_LIGHTS 50
struct lightIndexArray {
	int indices[MAX_CLUSTER_LIGHTS];
};

layout(std430, binding = 1) buffer LightBuffer
{
	Light lights[];
} lightBuffer;


layout(std430, binding = 2) buffer IndexLookup
{
	lightIndexArray data[];
} indexLookupBuffer;

// layout(std430, binding = 3) buffer ClustersData
// {
// 	vec4 frustums[];
// } clusterTable;

// Shared values between all the threads in the group
shared uint visibleLightCount;
vec4 frustumPlanes[6];
// Shared local storage for visible indices, will be written out to the global buffer at the end
shared int visibleLightIndices[100];
shared mat4 viewProjection;
shared mat4 inverseProj;
shared mat4 inv_projView;


#define LIGHT_NUM 200


void createFrustumPlanes() {
	// Left
	frustumPlanes[0].x = viewProjection[3][0] + viewProjection[0][0];
	frustumPlanes[0].y = viewProjection[3][1] + viewProjection[0][1];
	frustumPlanes[0].z = viewProjection[3][2] + viewProjection[0][2];
	frustumPlanes[0].w = viewProjection[3][3] + viewProjection[0][3];

	// Right
	frustumPlanes[1].x = viewProjection[3][0] - viewProjection[0][0];
	frustumPlanes[1].y = viewProjection[3][1] - viewProjection[0][1];
	frustumPlanes[1].z = viewProjection[3][2] - viewProjection[0][2];
	frustumPlanes[1].w = viewProjection[3][3] - viewProjection[0][3];

	// Top
	frustumPlanes[2].x = viewProjection[3][0] - viewProjection[1][0];
	frustumPlanes[2].y = viewProjection[3][1] - viewProjection[1][1];
	frustumPlanes[2].z = viewProjection[3][2] - viewProjection[1][2];
	frustumPlanes[2].w = viewProjection[3][3] - viewProjection[1][3];
	
	// Bottom
	frustumPlanes[3].x = viewProjection[3][0] + viewProjection[1][0];
	frustumPlanes[3].y = viewProjection[3][1] + viewProjection[1][1];
	frustumPlanes[3].z = viewProjection[3][2] + viewProjection[1][2];
	frustumPlanes[3].w = viewProjection[3][3] + viewProjection[1][3];

	// // Far
	// frustumPlanes[4].x = viewProjection[3][0] + viewProjection[2][0] * 100.0;
	// frustumPlanes[4].y = viewProjection[3][1] + viewProjection[2][1] * 100.0;
	// frustumPlanes[4].z = viewProjection[3][2] + viewProjection[2][2] * 100.0;
	// frustumPlanes[4].w = viewProjection[3][3] + viewProjection[2][3] * 100.0;

	// // Top
	// frustumPlanes[5].x = viewProjection[3][0] - viewProjection[2][0] * 0.1;
	// frustumPlanes[5].y = viewProjection[3][1] - viewProjection[2][1] * 0.1;
	// frustumPlanes[5].z = viewProjection[3][2] - viewProjection[2][2] * 0.1;
	// frustumPlanes[5].w = viewProjection[3][3] - viewProjection[2][3] * 0.1;

	for (int i = 0; i < 4; i++) {
		frustumPlanes[i] /= length(frustumPlanes[i].xyz);
	}
}

#define TILE_SIZE 32
#define THREAD_COUNT 8
layout(local_size_x = THREAD_COUNT, local_size_y = 1) in;
void main() {



	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	// Initialize shared global values for depth and light count
	if (gl_LocalInvocationIndex == 0) {
		visibleLightCount = 0;
		viewProjection = ubo.proj * ubo.view;
		inverseProj = transpose(ubo.proj);
		inv_projView = inverse(ubo.proj * ubo.view);
	}

	int l_index = location.x;
	if (l_index < ubo.number_lights) {
		// Update velocity
		vec4 pos = lightBuffer.lights[l_index].pos;
		vec4 vel = lightBuffer.lights[l_index].vel;
		pos[1] += vel[0]*0.1;
		if (pos[1] >= vel[1])
			pos[1] = vel[2];

		lightBuffer.lights[l_index].pos = pos;
	}

	barrier();

	// Calculate the frustum coordinates in screen space
	if (gl_LocalInvocationIndex == 0) {
		inv_projView = inverse(ubo.proj * ubo.view);

		// vulkan ndc, minDepth = 0.0, maxDepth = 1.0
		const vec2 ndc_upper_left = vec2(-1.0, -1.0);
		const float ndc_near_plane = 0.0;
		const float ndc_far_plane = 1.0;
		

		vec2 tiles_2_pix = 2.0f * vec2(TILE_SIZE, TILE_SIZE) / vec2(ubo.width, ubo.height);
		
		vec2 screenFrustum[4];
		screenFrustum[0] = ndc_upper_left + tileID * tiles_2_pix;
	    screenFrustum[1] = screenFrustum[0] + vec2(tiles_2_pix.x, 0.0f);
	    screenFrustum[2] = screenFrustum[0] + vec2(tiles_2_pix.x, tiles_2_pix.y);
	    screenFrustum[3] = screenFrustum[0] + vec2(0.0f, tiles_2_pix.x); 

	    // Convert to view space
	    vec3 viewFrustum[8];
	    vec4 view;
	    for (int i = 0; i < 4; i++) {
	    	view = inv_projView * vec4(screenFrustum[i], 0.0f, 1.0f);
	    	viewFrustum[i] = view.xyz / view.w;
	    	view = inv_projView * vec4(screenFrustum[i], 1.0f, 1.0f);
	    	viewFrustum[i + 4] = view.xyz / view.w;
	    }


	    for (int i = 0; i < 4; i++) {
			frustumPlanes[i].xyz = normalize(cross(viewFrustum[i] - ubo.pos.xyz, viewFrustum[(i + 1)] - ubo.pos.xyz));
			frustumPlanes[i].w   = -dot(frustumPlanes[i].xyz, viewFrustum[i]);
	    }

	    frustumPlanes[4].xyz = normalize(cross(viewFrustum[1] - viewFrustum[0], viewFrustum[3]- viewFrustum[0]));
	    frustumPlanes[4].w   = -dot(frustumPlanes[4].xyz, viewFrustum[0]);
		frustumPlanes[5].xyz = normalize(cross(viewFrustum[7] - viewFrustum[4], viewFrustum[5]- viewFrustum[4]));
		frustumPlanes[5].w   = -dot(frustumPlanes[5].xyz, viewFrustum[4]);

	}
	barrier();


	uint lightCount = ubo.number_lights;
	uint threadCount = THREAD_COUNT * THREAD_COUNT;
	uint passCount = (lightCount + threadCount - 1) / threadCount;
	// uint lightCounter = 0;
	for (uint i = gl_LocalInvocationIndex; i < LIGHT_NUM && visibleLightCount < MAX_CLUSTER_LIGHTS; i += gl_WorkGroupSize.x) {
		// Get the lightIndex to test for this thread / pass. If the index is >= light count, then this thread can stop testing lights
		uint lightIndex = i;// * threadCount + (itemID.y * THREAD_COUNT + itemID.x);
		// uint lightIndex = atomicAdd(lightCounter, 1);
		// if (lightIndex >= lightCount) {
		// 	break;
		// }

		vec4 pos = lightBuffer.lights[lightIndex].pos;
		float radius = lightBuffer.lights[lightIndex].vel.w * 1.5;
		// float depth = position.w;
		// position /= position.w;

		// We check if the light exists in our frustum
		bool inFrustum = true;
		for (uint j = 0; j < 6; j++) {
			if (dot(pos.xyz, frustumPlanes[j].xyz) + frustumPlanes[j].w < -radius) {
				inFrustum = false;
				break;
			}
		}

		// If greater than zero, then it is a visible light
		if (inFrustum) {
			// Add index to the shared array of visible indices
			uint offset = atomicAdd(visibleLightCount, 1);
			if (visibleLightCount >= ubo.max_lights_per_cluster) {break;}
			indexLookupBuffer.data[index].indices[offset] = int(lightIndex);
		}
	}

	barrier();


	if (gl_LocalInvocationIndex == 0) {
		// uint offset = index * 50; // Determine bosition in global buffer
		// for (uint i = 0; i < min(visibleLightCount, ubo.max_lights_per_cluster) ; i++) {
		// 	indexLookupBuffer.data[i + offset] = visibleLightIndices[i];
		// }

		if (visibleLightCount < ubo.max_lights_per_cluster) {
			indexLookupBuffer.data[index].indices[visibleLightCount] = -1;
		}
	}

}