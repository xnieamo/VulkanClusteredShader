#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable


struct Light 
{
	vec4 pos;
	vec4 col;
	vec4 vel;
};

#define MAX_CLUSTER_LIGHTS 50
struct lightIndexArray {
	int indices[MAX_CLUSTER_LIGHTS];
};

layout(binding = 0) uniform UniformBufferObject {
	int height;
    int width;
    int xtiles;
    int ytiles;
    int max_lights_per_cluster;
    int number_lights;
    int tile_size;
    mat4 model;
    mat4 view;
    mat4 proj;
    vec4 pos;
    vec4 dir;
    vec4 up;

} ubo;

layout(std430, binding = 1) buffer LightBuffer
{
	Light lights[];
} lightBuffer;

layout(std430, binding = 2) buffer IndexLookup
{
	lightIndexArray data[];
} indexLookupBuffer;


// Shared values between all the threads in the group
shared uint visibleLightCount[10];
shared vec4 frustumPlanes[4];
shared mat4 inv_projView;

// const float Z_explicit[10] = {0.00f, 0.23f, 0.52f, 1.2f, 2.7f, 6.0f, 14.f, 31.f, 71.f, 161.f};
const float Z_explicit[11] = {0.01f, 4.5f, 6.7f, 9.0f, 16.5f, 22.1f, 30.5f, 41.8f, 56.8f, 75.f, 100.f};
const float max_depth = 100.f;

#define LIGHT_NUM 100
#define TILE_SIZE 32
#define THREAD_COUNT 16
layout(local_size_x = THREAD_COUNT, local_size_y = 1) in;
void main() {

	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	// Initialize shared global values for depth and light count
	if (gl_LocalInvocationIndex == 0) {
		for (int i = 0; i < 10; i++)
			visibleLightCount[i] = 0;
		inv_projView = inverse(ubo.proj * ubo.view);
	}

	if (gl_GlobalInvocationID.x < ubo.number_lights) {
		// Update velocity
		vec4 pos = lightBuffer.lights[gl_GlobalInvocationID.x].pos;
		vec4 vel = lightBuffer.lights[gl_GlobalInvocationID.x].vel;
		pos[1] += vel[0]*0.1;
		if (pos[1] >= vel[1])
			pos[1] = vel[2];

		lightBuffer.lights[gl_GlobalInvocationID.x].pos = pos;
	}

	barrier();

	// Create the frustum
	if (gl_LocalInvocationIndex == 0) {

		vec2 tiles_2_pix = 2.0f * vec2(TILE_SIZE, TILE_SIZE) / vec2(ubo.width, ubo.height);
		
		vec2 screenFrustum[4];
		screenFrustum[0] = vec2(-1.0, -1.0) + tileID * tiles_2_pix;
	    screenFrustum[1] = screenFrustum[0] + vec2(tiles_2_pix.x, 0.0f);
	    screenFrustum[2] = screenFrustum[0] + vec2(tiles_2_pix.x, tiles_2_pix.y);
	    screenFrustum[3] = screenFrustum[0] + vec2(0.0f, tiles_2_pix.x); 

	    // Convert to view space
	    vec3 viewFrustum[8];
	    vec4 view;
	    for (int i = 0; i < 4; i++) {
	    	view = inv_projView * vec4(screenFrustum[i], 0.0f, 1.0f);
	    	viewFrustum[i] = view.xyz / view.w;
	    	view = inv_projView * vec4(screenFrustum[i], 1.0f, 1.0f);
	    	viewFrustum[i + 4] = view.xyz / view.w;
	    }


	    for (int i = 0; i < 4; i++) {
			frustumPlanes[i].xyz = normalize(cross(viewFrustum[i] - ubo.pos.xyz, viewFrustum[(i + 1)] - ubo.pos.xyz));
			frustumPlanes[i].w   = -dot(frustumPlanes[i].xyz, viewFrustum[i]);
	    }
	}
	barrier();

	// Compute light culling
	uint passCount = (LIGHT_NUM + THREAD_COUNT - 1) / THREAD_COUNT;
	for (uint i = 0; i < passCount; i++) {
		uint lightIndex = i * THREAD_COUNT + itemID.x;
		if (lightIndex > LIGHT_NUM) {
			break;
		}

		vec4 pos     = lightBuffer.lights[lightIndex].pos;
		float radius = lightBuffer.lights[lightIndex].pos.w;

		bool inFrustum = true;
		for (uint j = 0; j < 4; j++) {
			if (dot(pos.xyz, frustumPlanes[j].xyz) + frustumPlanes[j].w < -radius) {
				inFrustum = false;
				break;
			}
		}

		if (inFrustum) {
			// Depth test to find z plane range
			vec4 viewSpacePos = ubo.proj * ubo.view * vec4(pos.xyz, 1.0);
			vec4 viewSpaceRay = ubo.proj * ubo.view * vec4(normalize(pos.xyz - ubo.pos.xyz), 0.0);
			radius = radius * length(viewSpaceRay.xyz);
			
			uint startPlane = 0, endPlane = 10;
			for (int j = 0; j < 10; j++) {
				// sphere depth - plane depth < radius -> start
				if (viewSpacePos.z - Z_explicit[j + 1] < radius)
					startPlane = min(startPlane, j);

				// plane depth - sphere depth > radius -> end
				if (Z_explicit[j] - viewSpacePos.z > radius)
					endPlane = min(endPlane, j);
			}

			// Add index to appropriate clusters
			for (uint j = startPlane; j < endPlane; j++) {
				uint offset = atomicAdd(visibleLightCount[j], 1);
				if (visibleLightCount[j] < ubo.max_lights_per_cluster)
					indexLookupBuffer.data[index + j * tileNumber.x * tileNumber.y].indices[offset] = int(lightIndex);
			}
		}
	}

	barrier();

	if (gl_LocalInvocationIndex == 0) {
		for (int i = 0; i < 10; i++)
			if (visibleLightCount[i] < ubo.max_lights_per_cluster) {
				indexLookupBuffer.data[index + i * tileNumber.x * tileNumber.y].indices[visibleLightCount[i]] = -1;
			}
	}

}


